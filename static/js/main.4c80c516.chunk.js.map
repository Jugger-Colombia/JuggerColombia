{"version":3,"sources":["Components/jugger_logo.svg","Components/NavBar/navBar.jsx","Components/Banner/banner.jsx","Components/QQYellow/data.js","Components/QQYellow/QQYellow.jsx","Components/Clubes/Clubes.jsx","Components/Footer/footer.jsx","JuggerApp.jsx","serviceWorker.js","index.js"],"names":["module","exports","NAVS","nosotros","clubes","entrenamientos","eventos","contacto","NavBarItemsList","props","children","NavBarItem","href","name","defaultProps","NavBar","navs_list","Object","keys","map","i","key","useEffect","window","addEventListener","document","querySelector","classList","toggle","scrollY","className","src","logo","alt","Banner","process","INFO","jugger","juggerColombia","Card","cardPlace","bg1","bg2","style","background","backgroundSize","QQYellow","ref","useRef","useState","setCardPlace","lock","setLock","output","options","visible","setVisible","threshold","setThreshold","observer","IntersectionObserver","entry","isIntersecting","intersectionRatio","current","observe","useOnScreen","rootMargin","QueEsJugger","QueEsJuggerColombia","Clubes","Footer","JuggerApp","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4c80c516.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/jugger_logo.727bb696.svg\";","import React, {  useEffect } from \"react\";\r\nimport logo from \"../jugger_logo.svg\"\r\nimport \"./navbar.css\";\r\n\r\nconst NAVS = {\r\n    nosotros: \"#nosotros\" ,\r\n    clubes: \"#clubes\" ,\r\n    entrenamientos: \"#entrenamientos\" ,\r\n    eventos: \"#eventos\" ,\r\n    contacto: \"#contacto\" ,\r\n} \r\n\r\n\r\nconst NavBar = () =>{\r\n\r\n    var navs = Object.keys(NAVS);\r\n    var navs_list = navs.map(\r\n        (i)=> ( <NavBarItem name={i}  key={i}/>)\r\n    )\r\n\r\n    useEffect(() =>{\r\n        window.addEventListener(\"scroll\",() =>{\r\n            var nav = document.querySelector(\"nav\");\r\n            nav.classList.toggle(\"sticky\", window.scrollY > 0);\r\n            /* console.log(window.scrollY); */\r\n        })\r\n    },[])\r\n\r\n    return(\r\n        <header className=\"App-header\">\r\n            <nav>\r\n                <div className=\"jugger_logo\">\r\n                    <figure >\r\n                        <img  src={logo} alt=\"Jugger Colombia Logo\"/>\r\n                    </figure>\r\n                    <a href=\"#test\" className=\"logo\">JUGGER COLOMBIA</a>\r\n                </div>\r\n                <NavBarItemsList >\r\n                    {navs_list}\r\n                </NavBarItemsList>\r\n            </nav>    \r\n        </header>\r\n    )\r\n}\r\n\r\nconst NavBarItemsList  = (props) =>{\r\n    \r\n    return (\r\n        <ul>\r\n            {props.children}\r\n        </ul>\r\n    )\r\n}\r\n\r\nconst NavBarItem = (props) => {\r\n\r\n    return (\r\n        <li> \r\n            <a href={`#${props.name}`}> {props.name}</a>\r\n        </li>\r\n    )\r\n}\r\n\r\n\r\nNavBarItem.defaultProps = {\r\n    name: \"HOLI\"   \r\n}\r\nexport default NavBar;","import React from \"react\";\r\nimport \"./banner.css\"\r\nconst Banner = () =>{\r\n    return(\r\n        <section className=\"banner\">\r\n            <img src={`${process.env.PUBLIC_URL }/frontPage/REDBANNER.jpg`} alt=\"\"/>\r\n            <p className=\"tag\">COLOMBIA</p>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Banner;","const INFO = {\r\n    jugger:[\r\n        \"El jugger es un deporte de contacto mixto originado en Alemania alrededor de 1993, que mezcla elementos de esgrima con elementos del rugby en un juego de alta intensidad por equipos.\",\r\n\r\n        \"Consiste en dos equipos que se encuentran en el campo de juego (un octágono de 40 x 20 mts) y luchan por el control del jugg (balón de juego) para marcar puntos en el mal (portería) contrarios. Al finalizar el partido, el equipo con más puntos gana.\",\r\n\r\n        \"Cada equipo cuenta con 4 pompfer (combatientes) y un qwik (corredor). Los corredores son los únicos que pueden tomar el balón de juego y marcar puntos, y se enfrentan entre sí con reglas que recuerdan al rugby. Mientras tanto, lo combatientes se enfrentan entre ellos con reglas que recuerdan a la esgrima (y elementos creados para el deporte con las necesarias reglas de seguridad) para abrir campo a su corredor: cuando un jugador es impactado queda inactivo dentro del campo de juego por un tiempo determinado antes de volver a incorporarse al juego.\",\r\n\r\n        \"De esta manera, a muy grandes rasgos, se desarrolla un partido de jugger, que por sus características se convierte en un deporte explosivo donde hay pocas oportunidades para caminar o trotar ya que todo el tiempo debes correr a máxima velocidad, exigiendo tanto una adecuada preparación física como una comunicación en equipo asertiva.\",\r\n\r\n        \"Teniendo en cuenta la naturaleza mixta del deporte, es una plataforma que en su misma esencia propende por la eliminación de barreras sociales basadas en la diferenciación negativa de géneros, así como también inculca un gran sentido de la honestidad y la responsabilidad con el otro.\"\r\n    ],\r\n    juggerColombia:[\r\n        \"Jugger Colombia comenzó con dos amigos apasionados que encontraron este deporte alternativo con raíces alemanas y decidieron que sería genial practicarlo en Colombia: un deporte de contacto donde mujeres y hombres pueden competir en equipos mixtos era una idea tentadora ya que Colombia es conocida por sus problemas sociales, y especialmente los relacionados con la discriminación de género. Aunque el deporte se introdujo en 2011 y comenzó a practicar en Bogotá desde entonces, fue en 2015 cuando se fundaron los primeros equipos oficiales, por lo que la organización del deporte realmente comenzó.\",\r\n\r\n        \"A lo largo de estos cinco años, Jugger Colombia ha sido la plataforma de apoyo administrativo que ayuda al crecimiento y desarrollo del deporte: desde la traducción del reglamento alemán de jugger hasta los procedimientos legales para tener acceso a canchas sintéticas y otros recursos gubernamentales, Jugger Colombia está enfocado en facilitar la introducción a cualquiera que desee practicar el deporte, de modo que solo tenga que concentrarse en disfrutar y aprender los valores del deporte.\"\r\n    ]\r\n}\r\n\r\nexport default INFO;","import React,{useEffect, useRef} from 'react';\r\nimport INFO from './data';\r\nimport './QQYellow.css'\r\nimport './card.css';\r\nimport { useState } from 'react';\r\n\r\n\r\nconst QQYellow = () =>{\r\n    const ref = useRef();\r\n\r\n    const [cardPlace, setCardPlace] = useState('left');\r\n    const [lock,setLock] = useState(false);\r\n    const output = useOnScreen(ref,{ rootMargin: \"-20%\"});\r\n\r\n    const QueEsJugger = INFO['jugger'].map(i => <p key={`jugger${i}`}>{i}</p>);\r\n    const QueEsJuggerColombia= INFO['juggerColombia'].map(i => <p  key={`juggerColombia${i}`}>{i}</p>);\r\n   \r\n\r\n    useEffect(() =>{\r\n        const { visible} = output;\r\n        if(visible){\r\n            if(!lock){\r\n                setCardPlace(cardPlace==='left'?'right':'left')\r\n                setLock(true);\r\n            }\r\n        }else{\r\n            setLock(false)\r\n        }\r\n    },[ref,output,cardPlace,lock])\r\n\r\n\r\n    return(\r\n        <section className=\"stickyContainer\" >\r\n            <div className=\"sticky\">\r\n                <div className={`text-container ${cardPlace}`} >\r\n                    <div className=\"text text-right\">\r\n                        {QueEsJugger}\r\n                    </div>\r\n                    <div className=\"text text-left\">\r\n                        {QueEsJuggerColombia}\r\n                    </div>\r\n                </div>\r\n                <div className=\"card-content\">\r\n                    <Card cardPlace={cardPlace}/> \r\n                </div>\r\n            </div>\r\n            <span ref={ref}></span>\r\n\r\n        </section>\r\n    )\r\n}\r\n\r\nconst Card = (props) =>{\r\n    const {cardPlace = \"\"} = props\r\n    const bg1 = `url(${process.env.PUBLIC_URL }/frontPage/Yellow1FLT.png)`;\r\n    const bg2 = `url(${process.env.PUBLIC_URL }/frontPage/Yellow2FLT.png)`;\r\n\r\n\r\n    return(\r\n        <div className={`card ${cardPlace}`}>\r\n            <div className=\"face front\" style= {{background: bg1, backgroundSize: 'cover'}}>\r\n                <h2>Que es Jugger ?</h2>\r\n            </div>\r\n            <div className=\"face back\" style= {{background: bg2, backgroundSize: 'cover'}}>\r\n                <h2>Que es Jugger Colombia ?</h2>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction useOnScreen (ref,options){\r\n    const [visible, setVisible] = useState(false);\r\n    const [threshold, setThreshold] = useState(0);\r\n   \r\n    useEffect(()=>{\r\n        const observer = new IntersectionObserver(\r\n            ([entry])=>{\r\n                setVisible(entry.isIntersecting);\r\n                setThreshold(entry.intersectionRatio);\r\n            }, options\r\n        );\r\n        \r\n        if(ref.current){\r\n            observer.observe(ref.current);\r\n        }\r\n       /*  return () =>{\r\n            if(ref.current){\r\n                observer.unobserve(ref.current);\r\n            }\r\n        } */\r\n    },[ref,options])\r\n\r\n    return  {ref, visible ,threshold}\r\n}\r\n\r\nexport default QQYellow;","import React from 'react';\r\nimport './Clubes.css';\r\n\r\nconst Clubes = ()=>{\r\n    return(\r\n        <section className='clubes'> \r\n\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Clubes;","import React from 'react';\r\nimport logo from \"../jugger_logo.svg\"\r\nimport \"./footer.css\";\r\n\r\nconst  Footer = () =>{\r\n    return (\r\n        <section className=\"footer\">\r\n            <div className=\"down-index\">\r\n                <section > \r\n                    <a href=\"#test\" className=\"icon\"><i className=\"flaticon-001-facebook\"></i>@ Juggercolombia</a>\r\n                    <a href=\"#test\"  className=\"icon\"><i className=\"flaticon-002-twitter\"></i>@ Juggercolombia</a>\r\n                    <a href=\"#test\"  className=\"icon\"><i className=\"flaticon-011-instagram\"></i> @ Jugger.co</a>\r\n                </section>\r\n                <section>\r\n                    <h5 >FAQ</h5>\r\n                    <h5 >Reglamento & Otros Documentos </h5>\r\n                    <h5 >Politicas de Privacidad</h5>\r\n                </section>\r\n                <section>\r\n                    <h4 >JUGGER COLOMBIA</h4>\r\n                    <h6 >Dirección: Carrera 52 # 74-22</h6>\r\n                    <h6 >Bogotá D.C - Colombia</h6>\r\n                    <h6 >Teléfonos: 305 3680606 - 305 7128436</h6>\r\n                    <h6 >www.jugger.co - juggercolombia@gmail.com </h6>\r\n                </section>\r\n                <section>\r\n                    <div className=\"jugger_logo\">\r\n                        <figure >\r\n                            <img  src={logo} alt=\"Jugger Colombia Logo\"/>\r\n                        </figure>\r\n                    </div>\r\n                </section>\r\n\r\n            </div>\r\n            <h5 className=\"rights\">\r\n               {\"Jugger Colombia 2020 - Todos los derechos reservados / Sitio diseñador por: MajoAlvarez-Diseño y desarrollado por: Marca de Moggy\"}\r\n            </h5>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Footer;\r\n\r\n\r\n/**\r\n * \r\n *  <section className=\"header-icons-container\">\r\n\r\n        <div className=\"icons\">\r\n            <a href=\"#test\"><span className=\"flaticon-001-facebook\"></span></a>\r\n            <a href=\"#test\"><span className=\"flaticon-002-twitter\"></span></a>\r\n            <a href=\"#test\"><span className=\"flaticon-011-instagram\"></span></a>\r\n            <a href=\"#test\"><span className=\"flaticon-008-youtube\"></span></a>\r\n            <a href=\"#test\"><span className=\"flaticon-010-linkedin\"></span></a>\r\n            \r\n            <a href=\"#test\"><i className=\"flaticon-001-facebook\"></i></a>\r\n            <a href=\"#test\"><i className=\"flaticon-002-twitter\"></i></a>\r\n            <a href=\"#test\"><i className=\"flaticon-011-instagram\"></i></a>\r\n            <a href=\"#test\"><i className=\"flaticon-008-youtube\"></i></a>\r\n        </div>\r\n    </section>\r\n * \r\n * \r\n * \r\n */","import React from 'react';\nimport NavBar from './Components/NavBar/navBar';\nimport Banner from './Components/Banner/banner';\nimport QQYellow from './Components/QQYellow/QQYellow';\nimport Clubes from './Components/Clubes/Clubes';\nimport Footer from './Components/Footer/footer';\n\nimport './JuggerApp.css';\nimport './SocialMedia/font/flaticon.css';\n\nfunction JuggerApp() {\n  return (\n    <div className=\"App\">\n      <NavBar/>\n\n      <Banner/>\n      <QQYellow/>\n      <Clubes/>\n\n      <Footer/>\n    </div>\n  );\n}\n\nexport default JuggerApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport JuggerApp from './JuggerApp';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <JuggerApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}